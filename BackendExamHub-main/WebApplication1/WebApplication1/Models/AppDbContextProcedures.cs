// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebApplication1.Models;

namespace WebApplication1.Models
{
    public partial class AppDbContext
    {
        private IAppDbContextProcedures _procedures;

        public virtual IAppDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AppDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAppDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class AppDbContextProcedures : IAppDbContextProcedures
    {
        private readonly AppDbContext _context;

        public AppDbContextProcedures(AppDbContext context)
        {
            _context = context;
        }

        public virtual async Task<int> NEWSIDAsync(string TableName, OutputParameter<string> ReturnSID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterReturnSID = new SqlParameter
            {
                ParameterName = "ReturnSID",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ReturnSID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 256,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterReturnSID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[NEWSID] @TableName = @TableName, @ReturnSID = @ReturnSID OUTPUT", sqlParameters, cancellationToken);

            ReturnSID.SetValue(parameterReturnSID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_AddLogAsync(byte? _InBox_ReadID, string _InBox_SPNAME, Guid? _InBox_GroupID, string _InBox_ExProgram, string _InBox_ActionJSON, OutputParameter<string> _OutBox_ReturnValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameter_OutBox_ReturnValues = new SqlParameter
            {
                ParameterName = "_OutBox_ReturnValues",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = _OutBox_ReturnValues?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "_InBox_ReadID",
                    Value = _InBox_ReadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "_InBox_SPNAME",
                    Size = 240,
                    Value = _InBox_SPNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "_InBox_GroupID",
                    Value = _InBox_GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "_InBox_ExProgram",
                    Size = 80,
                    Value = _InBox_ExProgram ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "_InBox_ActionJSON",
                    Size = -1,
                    Value = _InBox_ActionJSON ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameter_OutBox_ReturnValues,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_AddLog] @_InBox_ReadID = @_InBox_ReadID, @_InBox_SPNAME = @_InBox_SPNAME, @_InBox_GroupID = @_InBox_GroupID, @_InBox_ExProgram = @_InBox_ExProgram, @_InBox_ActionJSON = @_InBox_ActionJSON, @_OutBox_ReturnValues = @_OutBox_ReturnValues OUTPUT", sqlParameters, cancellationToken);

            _OutBox_ReturnValues.SetValue(parameter_OutBox_ReturnValues.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_Delete_ACPDAsync(string acpd_sid, string acpd_updid, OutputParameter<string> OutBox_ReturnValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterOutBox_ReturnValues = new SqlParameter
            {
                ParameterName = "OutBox_ReturnValues",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = OutBox_ReturnValues?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "acpd_sid",
                    Size = 40,
                    Value = acpd_sid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_updid",
                    Size = 40,
                    Value = acpd_updid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterOutBox_ReturnValues,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_Delete_ACPD] @acpd_sid = @acpd_sid, @acpd_updid = @acpd_updid, @OutBox_ReturnValues = @OutBox_ReturnValues OUTPUT", sqlParameters, cancellationToken);

            OutBox_ReturnValues.SetValue(parameterOutBox_ReturnValues.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_Insert_ACPDResult>> usp_Insert_ACPDAsync(string acpd_cname, string acpd_ename, string acpd_sname, string acpd_email, byte? acpd_status, bool? acpd_stop, string acpd_stopMemo, string acpd_LoginID, string acpd_LoginPW, string acpd_memo, string appd_nowid, OutputParameter<string> OutBox_ReturnValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterOutBox_ReturnValues = new SqlParameter
            {
                ParameterName = "OutBox_ReturnValues",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = OutBox_ReturnValues?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "acpd_cname",
                    Size = 120,
                    Value = acpd_cname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_ename",
                    Size = 80,
                    Value = acpd_ename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_sname",
                    Size = 80,
                    Value = acpd_sname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_email",
                    Size = 120,
                    Value = acpd_email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_status",
                    Value = acpd_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_stop",
                    Value = acpd_stop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_stopMemo",
                    Size = 1200,
                    Value = acpd_stopMemo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_LoginID",
                    Size = 60,
                    Value = acpd_LoginID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_LoginPW",
                    Size = 120,
                    Value = acpd_LoginPW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_memo",
                    Size = 240,
                    Value = acpd_memo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appd_nowid",
                    Size = 40,
                    Value = appd_nowid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterOutBox_ReturnValues,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_Insert_ACPDResult>("EXEC @returnValue = [dbo].[usp_Insert_ACPD] @acpd_cname = @acpd_cname, @acpd_ename = @acpd_ename, @acpd_sname = @acpd_sname, @acpd_email = @acpd_email, @acpd_status = @acpd_status, @acpd_stop = @acpd_stop, @acpd_stopMemo = @acpd_stopMemo, @acpd_LoginID = @acpd_LoginID, @acpd_LoginPW = @acpd_LoginPW, @acpd_memo = @acpd_memo, @appd_nowid = @appd_nowid, @OutBox_ReturnValues = @OutBox_ReturnValues OUTPUT", sqlParameters, cancellationToken);

            OutBox_ReturnValues.SetValue(parameterOutBox_ReturnValues.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_Update_ACPDAsync(string acpd_sid, string acpd_cname, string acpd_ename, string acpd_sname, string acpd_email, byte? acpd_status, bool? acpd_stop, string acpd_stopMemo, string acpd_LoginID, string acpd_LoginPW, string acpd_memo, string acpd_updid, OutputParameter<string> OutBox_ReturnValues, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterOutBox_ReturnValues = new SqlParameter
            {
                ParameterName = "OutBox_ReturnValues",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = OutBox_ReturnValues?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "acpd_sid",
                    Size = 40,
                    Value = acpd_sid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_cname",
                    Size = 120,
                    Value = acpd_cname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_ename",
                    Size = 80,
                    Value = acpd_ename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_sname",
                    Size = 80,
                    Value = acpd_sname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_email",
                    Size = 120,
                    Value = acpd_email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_status",
                    Value = acpd_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_stop",
                    Value = acpd_stop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_stopMemo",
                    Size = 1200,
                    Value = acpd_stopMemo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_LoginID",
                    Size = 60,
                    Value = acpd_LoginID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_LoginPW",
                    Size = 120,
                    Value = acpd_LoginPW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_memo",
                    Size = 240,
                    Value = acpd_memo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "acpd_updid",
                    Size = 40,
                    Value = acpd_updid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterOutBox_ReturnValues,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_Update_ACPD] @acpd_sid = @acpd_sid, @acpd_cname = @acpd_cname, @acpd_ename = @acpd_ename, @acpd_sname = @acpd_sname, @acpd_email = @acpd_email, @acpd_status = @acpd_status, @acpd_stop = @acpd_stop, @acpd_stopMemo = @acpd_stopMemo, @acpd_LoginID = @acpd_LoginID, @acpd_LoginPW = @acpd_LoginPW, @acpd_memo = @acpd_memo, @acpd_updid = @acpd_updid, @OutBox_ReturnValues = @OutBox_ReturnValues OUTPUT", sqlParameters, cancellationToken);

            OutBox_ReturnValues.SetValue(parameterOutBox_ReturnValues.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
